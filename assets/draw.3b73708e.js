var f=Object.defineProperty;var x=(o,e,r)=>e in o?f(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r;var a=(o,e,r)=>(x(o,typeof e!="symbol"?e+"":e,r),r);const y={NoDebug:0,DrawWireframe:1,DrawAabb:2,DrawFeaturesText:4,DrawContactPoints:8,NoDeactivation:16,NoHelpText:32,DrawText:64,ProfileTimings:128,EnableSatComparison:256,DisableBulletLCP:512,EnableCCD:1024,DrawConstraints:2048,DrawConstraintLimits:4096,FastWireframe:8192,DrawNormals:16384,MAX_DEBUG_DRAW_MODE:4294967295},n=(o,e,r,i,t)=>{e*=3,o[e+0]=r,o[e+1]=i,o[e+2]=t},u=Number({BASE_URL:"/ammo-worker/",MODE:"production",DEV:!1,PROD:!0}.AMMO_DEBUG_DRAW_BUFFER_SIZE);class p{constructor(e,r){a(this,"index",0);a(this,"enabled",!1);a(this,"warnedOnce",!1);a(this,"ammo");a(this,"world");a(this,"debugDrawer");a(this,"verticesArray",new Float32Array(u));a(this,"colorsArray",new Float32Array(u));a(this,"debugDrawMode",y.DrawWireframe);this.ammo=e,this.world=r,this.debugDrawer=new e.DebugDrawer,this.world.setDebugDrawer(this.debugDrawer)}enable(){this.enabled=!0}disable(){this.enabled=!1}update(){!this.enabled||(this.index=0,this.world.debugDrawWorld())}drawLine(e,r,i){const t=this.ammo.HEAPF32,c=t[(i+0)/4],s=t[(i+4)/4],d=t[(i+8)/4],h=t[(e+0)/4],D=t[(e+4)/4],w=t[(e+8)/4];n(this.verticesArray,this.index,h,D,w),n(this.colorsArray,this.index++,c,s,d);const l=t[(r+0)/4],b=t[(r+4)/4],m=t[(r+8)/4];n(this.verticesArray,this.index,l,b,m),n(this.colorsArray,this.index++,c,s,d)}drawContactPoint(e,r,i,t,c){const s=this.ammo.HEAPF32,d=s[(c+0)/4],h=s[(c+4)/4],D=s[(c+8)/4],w=s[(e+0)/4],l=s[(e+4)/4],b=s[(e+8)/4];n(this.verticesArray,this.index,w,l,b),n(this.colorsArray,this.index++,d,h,D);const m=s[(r+0)/4]*i,g=s[(r+4)/4]*i,A=s[(r+8)/4]*i;n(this.verticesArray,this.index,w+m,l+g,b+A),n(this.colorsArray,this.index++,d,h,D)}reportErrorWarning(e){this.ammo.hasOwnProperty("UTF8ToString")?console.warn(this.ammo.UTF8ToString(e)):this.warnedOnce||(this.warnedOnce=!0,console.warn("Cannot print warningString, please export UTF8ToString from Ammo.js in make.py"))}setDebugMode(e){this.debugDrawMode=e}getDebugMode(){return this.debugDrawMode}}export{y as AmmoDebugConstants,p as AmmoDebugDrawer};
